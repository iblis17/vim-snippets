priority -50

global !p
import vim

# Tests for the existence of a variable declared by Vim's filetype detection
# suggesting the type of shell script of the current file
def testShell(scope, shell):
	return vim.eval("exists('" + scope + ":is_" + shell + "')")

# Loops over the possible variables, checking for global variables
# first since they indicate an override by the user.
def getShell():
	for scope in ["g", "b"]:
		for shell in ["bash", "posix", "sh", "kornshell"]:
			if testShell(scope, shell) == "1":
				if shell == "kornshell":
					return "ksh"
				if shell == "posix":
					return "sh"
				return shell
	return "sh"
endglobal

snippet #!
`!p snip.rv = '#!/bin/' + getShell() + "\n\n" `
endsnippet

snippet !env "#!/usr/bin/env (!env)"
`!p snip.rv = '#!/usr/bin/env ' + getShell() + "\n\n" `
endsnippet

snippet sbash "safe bash options"
#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'
`!p snip.rv ='\n\n' `
endsnippet

snippet temp "Tempfile"
${1:TMPFILE}="$(mktemp -t ${2:`!p
snip.rv = re.sub(r'[^a-zA-Z]', '_', snip.fn) or "untitled"
`})"
${3:${4/(.+)/trap "/}${4:rm -f '$${1/.*\s//}'}${4/(.+)/" 0               # EXIT\n/}${5/(.+)/trap "/}${5:rm -f '$${1/.*\s//}'; exit 1}${5/(.+)/" 2       # INT\n/}${6/(.+)/trap "/}${6:rm -f '$${1/.*\s//}'; exit 1}${6/(.+)/" 1 15    # HUP TERM\n/}}

endsnippet

snippet here "here document (here)"
<<-${2:'${1:TOKEN}'}
	$0
${1/['"`](.+)['"`]/$1/}
endsnippet

##############################################
#  loop
##############################################

snippet for "for ... in loop" b
for ${1:i} in ${2:list}
do
	${3:${VISUAL}}$0
done
endsnippet

snippet while "while loop" b
while ${2:[ ${1:condiction} ]}
do
	${3:${VISUAL}}$0
done
endsnippet

snippet whilei "while loop with i" b
${1:i}=${2:0}
while [ \$$1 -lt ${3:$count} ]
do
	${3:${VISUAL}}$0
	
	i=\`expr $i + 1\`
done
endsnippet

snippet until "until ... (done)"
until ${2:[ ${1:condiction} ]}
do
	${3:${VISUAL}}$0
done
endsnippet

##############################################
#  if
##############################################

snippet if "if ... then" b
if ${2:[ ${1:condiction} ]}
then
	${3:${VISUAL}}$0
fi
endsnippet

snippet elif "elif ... then" b
elif ${2:[ ${1:condiction} ]}
then
	${3:${VISUAL}}$0
endsnippet

##############################################
#  case
##############################################

snippet case "case .. esac (case)"
case ${1:word} in
	${2:pattern} )
		$0;;
esac
endsnippet

##############################################
#  and / or
##############################################

snippet and "[ ... ] && { ... }" b
${2:[ ${1:condiction} ]} && {
	${3:${VISUAL}}$0
}
endsnippet

snippet or "[ ... ] || { ... }" b
${2:[ ${1:condiction} ]} || {
	${3:${VISUAL}}$0
}
endsnippet

# vim:ft=snippets:
